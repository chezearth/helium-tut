unit ShopMgmt;

Shop shop;

ShopOwner ownerToAdd;
ShopOwner ownerToRemove;

bool editing;


void init() {
  shop = Shop:new();
  ownerToAdd = null;
  shop.shopCode = generateShopCode();
  editing = false;
}


// helper to generate random and unique codes for shops
string generateShopCode() {
  string shopId = shop._id;
  string[] idParts = String:split(shopId, "-");
  int randomNumber = Math:random() * 100000;
  return String:concat(idParts.get(0), "-", randomNumber);
}


// Collection source for data table
Shop[] getShops() {
  return Shop:equals(deleted, false);
}


// Return all shop owners in the system
ShopOwner[] getAllShopOwners() {
  return ShopOwner:equals(deleted, false);
}


// Return all shop owners that are linked to the current shops
ShopOwner[] getCurrentShopOwners() {
  return shop.owners;
}


string addShopOwner() {
  shop.owners.append(ownerToAdd);
  ownerToAdd = null;
  return null;
}


string removeShopOwner() {
  ShopOwner[] shopOwners = getAllShopOwners();
  for(int i = 0; i < shopOwners.length(); i++) {
    ShopOwner currentShopOwner = shopOwners.get(i);
    if(ownerToRemove._id == currentShopOwner._id) {
      shop.owners.remove(i);
    }
  }
  return null;
}


DSL_VIEWS saveShop() {

//  if (shop.owner == null) {
//    Mez:alertError("alert.shop_owner_required");
//    return null;
//  }

  if (editing == true) {
    // When editing we record the current time
    shop.updatedOn = Mez:now();
  }
  else {
    // When saving for the first time we record the current time
    shop.createdOn = Mez:now();
    shop.deleted = false;
    shop.save();
  }

  init();
  return null;

}


DSL_VIEWS viewShop() {
  return DSL_VIEWS.ShopDetails;
}


DSL_VIEWS back() {
  return DSL_VIEWS.ShopMgmt;
}


DSL_VIEWS backToEntityMgmtMenu() {
  return DSL_VIEWS.EntityMgmtMenu;
}


DSL_VIEWS editShop() {
  editing = true;
  return null;
}


DSL_VIEWS deleteShop() {
  shop.deleted = true;
  init();
  return null;
}
