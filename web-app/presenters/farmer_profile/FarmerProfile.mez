unit FarmerProfile;

Farmer farmer;
Stock cropType;
Shop messagingShop;

// bool showFarmerCropTypes;

// string cropTypeTableLable;


void init() {
  farmer = Farmer:user();
  // showFarmerCropTypes = true;
  // cropTypeTableLable = "Hide crop types";
}


Stock[] getFarmerCropTypes() {
  return farmer.cropTypes;
}


// Return the stock items that rep stock types, and that are not alrewady linked to the farmer
Stock[] getEligibleCropTypes() {
  // `Diff` takes 2 selectors as arguments and returns items that are returned by the 1st, but not the 2nd, selector
  return Stock:diff(
    // Basic equals to oinly consider stock types that rep crop and not fertilizer
    equals(stockType, STOCK_TYPE.crop_seed),

    // Use relationships for all stocks that are linked to the selected farmer so that it can be excluded
    relationshipIn(farmers, farmer)
  );
}


// Link the selected crop types to the farmer
string addCropType() {
  farmer.cropTypes.append(cropType);
  farmer.cropTypeProfileUpdatedOn = Mez:now();
  return null;
}


// Unlink the selectd crop types from  the farmer
string removeFarmerCropType() {
  Stock[] farmerCropTypes = farmer.cropTypes;
  // for loop with counter over crop types collection
  for(int i = 0; i < farmerCropTypes.length(); i++) {
    Stock currentFarmerCropType = farmerCropTypes.get(i);
    // Compare item using internal ids to ensure equiv
    if(currentFarmerCropType._id == cropType._id) {
      farmerCropTypes.remove(i);
      farmer.cropTypeProfileUpdatedOn = Mez:now();
    }
  }
  cropType = null;
  return null;
}


// Unlink ALL crop types from the farmer
string removeAllFarmerCropTypes() {
  Stock[] farmerCropTypes = farmer.cropTypes;
  // loop reverse to avoid skipping over items as list is reduced
  for(int i = farmerCropTypes.length() - 1; i >= 0; i--) {
    farmerCropTypes.remove(i);
    farmer.cropTypeProfileUpdatedOn = Mez:now();
  }
  return null;
}


DSL_VIEWS backToMenu() {
  return DSL_VIEWS.FarmerProfileMenu;
}


DSL_VIEWS submitMessagingPreferences() {
  farmer.messagingProfileUpdatedOn = Mez:now();
  return DSL_VIEWS.FarmerProfileMessaging;
}


// View or hide farmer crop type details
// string toggleFarmerCropTypesVisibility() {
  // if(showFarmerCropTypes == false) {
    // showFarmerCropTypes = true;
    // cropTypeTableLable = "Hide crop types";
  // }
  // else {
    // showFarmerCropTypes = false;
    // cropTypeTableLable = "Show crop types";
  // }
  // return null;
// }


bool messagingOptedIn() {
  if(farmer.smsMessaging || farmer.emailMessaging) {
    return true;
  }
  return false;
}


Shop[] getEligibleShopsForMessaging() {
  return Shop:diff(
    equals(deleted, false),
    relationshipIn(notifiedFarmers, farmer)
  );
}


Shop[] getFarmerShopsForMessaging() {
  return farmer.messagingShops;
}


string addMessagingShop() {
  farmer.messagingShops.append(messagingShop);
  farmer.messagingProfileUpdatedOn = Mez:now();
  return null;
}


string removeMessagingShop() {
    Shop[] farmerMessagingShops = farmer.messagingShops;
    // Loop with a counter over the farmer messaging shops collection
    for(int i = 0; i < farmerMessagingShops.length(); i++) {
      Shop currentMessagingShop = farmerMessagingShops.get(i);
      // Compare item using internal ids to ensure equivalence
      if(currentMessagingShop._id == messagingShop._id) {
        farmerMessagingShops.remove(i);
        farmer.messagingProfileUpdatedOn = Mez:now();
      }
    }
    messagingShop = null;
    return null;
}


string removeAllMessagingShops() {
  Shop[] farmerMessagingShops = farmer.messagingShops;
  // Loop backwards to avoid skipping over items as list is reduced
  for(int i = farmerMessagingShops.length() - 1; i >= 0; i--) {
    farmerMessagingShops.remove(i);
    farmer.messagingProfileUpdatedOn = Mez:now();
  }
  return null;
}
